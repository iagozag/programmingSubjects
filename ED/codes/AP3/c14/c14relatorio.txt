1) A variável fact não tinha sido inicializada quando declarada, por isso o erro.

2) Script started on 2023-09-08 18:43:45-03:00 [TERM="alacritty" TTY="/dev/pts/1" COLUMNS="148" LINES="36"]
[;f6:43PMa]ch[siago@arch-sentinL1:~/Documents/school/ufmg/3_Semestre/ED/codes/TP/c14 ]
 $ gcc -g c14.gd	  b a.out
GNU gdb (GDB) 13.2
Copyright (C) 2023 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-pc-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...
(gdb) br 4
Breakpoint 1 at 0x1170: file c14.c, line 6.
(gdb) run
Starting program: /home/iago/Documents/school/ufmg/3_Semestre/ED/codes/TP/c14/a.out
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/usr/lib/libthread_db.so.1".

Breakpoint 1, main () at c14.c:6
6	  printf("Positive integer:");
(gdb) next
7	  scanf("%d", &n);
(gdb) next
Positive integer:5
9	  for(i = 1; i<=n; i++)
(gdb) p fact
$1 = 0
(gdb) next
10	    fact = fact*i;
(gdb) next
9	  for(i = 1; i<=n; i++)
(gdb) p fact
$2 = 0
(gdb) continue
Continuing.
Factorial 5 = 0
[Inferior 1 (process 124634) exited normally]
(gdb) exit
[;f6:44PMa]ch[siago@arch-sentinL1:~/Documents/school/ufmg/3_Semestre/ED/codes/TP/c14 ]
 $ valgrind --leak-check=full ./a.ouvalgrind --leak-check=full ./a.out
==124723== Memcheck, a memory error detector
==124723== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==124723== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==124723== Command: ./a.out
==124723==
Positive integer:5
==124723== Conditional jump or move depends on uninitialised value(s)
==124723==    at 0x48D63A1: __printf_buffer (vfprintf-process-arg.c:58)
==124723==    by 0x48D6E51: __vfprintf_internal (vfprintf-internal.c:1523)
==124723==    by 0x48CC2FE: printf (printf.c:33)
==124723==    by 0x1091D9: main (c14.c:12)
==124723==
==124723== Use of uninitialised value of size 8
==124723==    at 0x48CB32B: _itoa_word (_itoa.c:178)
==124723==    by 0x48D580F: __printf_buffer (vfprintf-process-arg.c:155)
==124723==    by 0x48D6E51: __vfprintf_internal (vfprintf-internal.c:1523)
==124723==    by 0x48CC2FE: printf (printf.c:33)
==124723==    by 0x1091D9: main (c14.c:12)
==124723==
==124723== Conditional jump or move depends on uninitialised value(s)
==124723==    at 0x48CB33C: _itoa_word (_itoa.c:178)
==124723==    by 0x48D580F: __printf_buffer (vfprintf-process-arg.c:155)
==124723==    by 0x48D6E51: __vfprintf_internal (vfprintf-internal.c:1523)
==124723==    by 0x48CC2FE: printf (printf.c:33)
==124723==    by 0x1091D9: main (c14.c:12)
==124723==
==124723== Conditional jump or move depends on uninitialised value(s)
==124723==    at 0x48D58B7: __printf_buffer (vfprintf-process-arg.c:186)
==124723==    by 0x48D6E51: __vfprintf_internal (vfprintf-internal.c:1523)
==124723==    by 0x48CC2FE: printf (printf.c:33)
==124723==    by 0x1091D9: main (c14.c:12)
==124723==
Factorial 5 = 0
==124723==
==124723== HEAP SUMMARY:
==124723==     in use at exit: 0 bytes in 0 blocks
==124723==   total heap usage: 2 allocs, 2 frees, 2,048 bytes allocated
==124723==
==124723== All heap blocks were freed -- no leaks are possible
==124723==
==124723== Use --track-origins=yes to see where uninitialised values come from
==124723== For lists of detected and suppressed errors, rerun with: -s
==124723== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
[;f6:44PMa]ch[siago@arch-sentinL1:~/Documents/school/ufmg/3_Semestre/ED/codes/TP/c14 ]
 $ exit

Script done on 2023-09-08 18:44:25-03:00 [COMMAND_EXIT_CODE="0"]

3) Inicializei fact = 1, para que as multiplicações posteriores dessem o resultado certo.

4) Script started on 2023-09-08 18:46:18-03:00 [TERM="alacritty" TTY="/dev/pts/1" COLUMNS="148" LINES="36"]
[;f6:46PMa]ch[siago@arch-sentinL1:~/Documents/school/ufmg/3_Semestre/ED/codes/TP/c14 ]
 $ gdb a.ougdb a.out
GNU gdb (GDB) 13.2
Copyright (C) 2023 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-pc-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...
(gdb) br 4
Breakpoint 1 at 0x1170: file c14correto.c, line 4.
(gdb) run
Starting program: /home/iago/Documents/school/ufmg/3_Semestre/ED/codes/TP/c14/a.out
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/usr/lib/libthread_db.so.1".

Breakpoint 1, main () at c14correto.c:4
4	  int n, i, fact = 1;
(gdb) next
6	  printf("Positive integer:");
(gdb) p fact
$1 = 1
(gdb) next
7	  scanf("%d", &n);
(gdb) next
Positive integer:5
9	  for(i = 1; i<=n; i++)
(gdb) display fact
1: fact = 1
(gdb) watch i
Hardware watchpoint 2: i
(gdb) c
Continuing.

Hardware watchpoint 2: i

Old value = 0
New value = 1
main () at c14correto.c:9
9	  for(i = 1; i<=n; i++)
1: fact = 1
(gdb) c
Continuing.

Hardware watchpoint 2: i

Old value = 1
New value = 2
0x00005555555551bd in main () at c14correto.c:9
9	  for(i = 1; i<=n; i++)
1: fact = 1
(gdb) c
Continuing.

Hardware watchpoint 2: i

Old value = 2
New value = 3
0x00005555555551bd in main () at c14correto.c:9
9	  for(i = 1; i<=n; i++)
1: fact = 2
(gdb) c
Continuing.

Hardware watchpoint 2: i

Old value = 3
New value = 4
0x00005555555551bd in main () at c14correto.c:9
9	  for(i = 1; i<=n; i++)
1: fact = 6
(gdb) c
Continuing.

Hardware watchpoint 2: i

Old value = 4
New value = 5
0x00005555555551bd in main () at c14correto.c:9
9	  for(i = 1; i<=n; i++)
1: fact = 24
(gdb) c
Continuing.

Hardware watchpoint 2: i

Old value = 5
New value = 6
0x00005555555551bd in main () at c14correto.c:9
9	  for(i = 1; i<=n; i++)
1: fact = 120
(gdb) c
Continuing.
Factorial 5 = 120

Watchpoint 2 deleted because the program has left the block in
which its expression is valid.
0x00007ffff7c27cd0 in ?? () from /usr/lib/libc.so.6
(gdb) info b
Num	Type	       Disp Enb Address		   What
1	breakpoint     keep y	0x0000555555555170 in main at c14correto.c:4
	breakpoint already hit 1 time
(gdb) delete 1
(gdb) info b
No breakpoints or watchpoints.
(gdb) exit
A debugging session is active.

	Inferior 1 [process 125346] will be killed.

Quit anyway? (y or n) n
Not confirmed.
(gdb) cont
Continuing.
[Inferior 1 (process 125346) exited normally]
(gdb) exit
[;f6:48PMa]ch[siago@arch-sentinL1:~/Documents/school/ufmg/3_Semestre/ED/codes/TP/c14 ]
 $ valgrind --leak-check=full ./a.ouvalgrind --leak-check=full ./a.out
==126023== Memcheck, a memory error detector
==126023== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==126023== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==126023== Command: ./a.out
==126023==
Positive integer:5
Factorial 5 = 120
==126023==
==126023== HEAP SUMMARY:
==126023==     in use at exit: 0 bytes in 0 blocks
==126023==   total heap usage: 2 allocs, 2 frees, 2,048 bytes allocated
==126023==
==126023== All heap blocks were freed -- no leaks are possible
==126023==
==126023== For lists of detected and suppressed errors, rerun with: -s
==126023== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[;f6:48PMa]ch[siago@arch-sentinL1:~/Documents/school/ufmg/3_Semestre/ED/codes/TP/c14 ]
 $ exit

Script done on 2023-09-08 18:49:01-03:00 [COMMAND_EXIT_CODE="0"]

