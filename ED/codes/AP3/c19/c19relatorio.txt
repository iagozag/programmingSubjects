1) A variável buf não foi inicializada de maneira correta para receber o resultado da soma.

2) Script started on 2023-09-08 19:28:43-03:00 [TERM="alacritty" TTY="/dev/pts/1" COLUMNS="148" LINES="36"]
[;f7:28PMa]ch[siago@arch-sentinL1:~/Documents/school/ufmg/3_Semestre/ED/codes/TP/c19 ]
 $ gdb a.out
GNU gdb (GDB) 13.2
Copyright (C) 2023 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-pc-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...
(gdb) br 19
Breakpoint 1 at 0x11dd: file c19.c, line 19.
(gdb) run
Starting program: /home/iago/Documents/school/ufmg/3_Semestre/ED/codes/TP/c19/a.out
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/usr/lib/libthread_db.so.1".
enter a number:

Breakpoint 1, printSum () at c19.c:19
19	    fgets(line, 10, stdin);
(gdb) next
5
21		strtok(line, "\n");
(gdb) next
22	    sprintf(buf,"sum=%d",sum_to_n(atoi(line)));
(gdb) p buf
$1 = 0x0
(gdb) next

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff7d5d5db in ?? () from /usr/lib/libc.so.6
(gdb) c
Continuing.

Program terminated with signal SIGSEGV, Segmentation fault.
The program no longer exists.
(gdb) exit
[;f7:29PMa]ch[siago@arch-sentinL1:~/Documents/school/ufmg/3_Semestre/ED/codes/TP/c19 ]
 $ valgrind --leak-check=full ./a.ouvalgrind --leak-check=full ./a.out
==137032== Memcheck, a memory error detector
==137032== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==137032== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==137032== Command: ./a.out
==137032==
enter a number:
5
==137032== Invalid write of size 2
==137032==    at 0x484C0D3: memmove (vg_replace_strmem.c:1400)
==137032==    by 0x48CCC88: memcpy (string_fortified.h:29)
==137032==    by 0x48CCC88: __printf_buffer_write (Xprintf_buffer_write.c:39)
==137032==    by 0x48D4BBB: __printf_buffer (vfprintf-internal.c:653)
==137032==    by 0x48F0851: __vsprintf_internal (iovsprintf.c:62)
==137032==    by 0x48D1EE4: sprintf (sprintf.c:30)
==137032==    by 0x10923D: printSum (c19.c:22)
==137032==    by 0x109271: main (c19.c:28)
==137032==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==137032==
==137032==
==137032== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==137032==  Access not within mapped region at address 0x0
==137032==    at 0x484C0D3: memmove (vg_replace_strmem.c:1400)
==137032==    by 0x48CCC88: memcpy (string_fortified.h:29)
==137032==    by 0x48CCC88: __printf_buffer_write (Xprintf_buffer_write.c:39)
==137032==    by 0x48D4BBB: __printf_buffer (vfprintf-internal.c:653)
==137032==    by 0x48F0851: __vsprintf_internal (iovsprintf.c:62)
==137032==    by 0x48D1EE4: sprintf (sprintf.c:30)
==137032==    by 0x10923D: printSum (c19.c:22)
==137032==    by 0x109271: main (c19.c:28)
==137032==  If you believe this happened as a result of a stack
==137032==  overflow in your program's main thread (unlikely but
==137032==  possible), you can try to increase the size of the
==137032==  main thread stack using the --main-stacksize= flag.
==137032==  The main thread stack size used in this run was 8388608.
==137032==
==137032== HEAP SUMMARY:
==137032==     in use at exit: 2,048 bytes in 2 blocks
==137032==   total heap usage: 2 allocs, 0 frees, 2,048 bytes allocated
==137032==
==137032== LEAK SUMMARY:
==137032==    definitely lost: 0 bytes in 0 blocks
==137032==    indirectly lost: 0 bytes in 0 blocks
==137032==	possibly lost: 0 bytes in 0 blocks
==137032==    still reachable: 2,048 bytes in 2 blocks
==137032==	   suppressed: 0 bytes in 0 blocks
==137032== Reachable blocks (those to which a pointer was found) are not shown.
==137032== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==137032==
==137032== For lists of detected and suppressed errors, rerun with: -s
==137032== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)
[1]    137032 segmentation fault (core dumped)	valgrind --leak-check=full ./a.out
[;f7:29PMa]ch[siago@arch-sentinL1:~/Documents/school/ufmg/3_Semestre/ED/codes/TP/c19 ]
 $ exit

Script done on 2023-09-08 19:29:07-03:00 [COMMAND_EXIT_CODE="139"]

3) Diminui em 1 a entrada do número para que a soma não ultrapasse o limite de uma variável long long e inicializei buf como um array de tamanho 5*10^17+10, prevendo um limite para a soma de 5*10^17 caso o número dado como input seja 999999999.

4) Script started on 2023-09-08 19:29:17-03:00 [TERM="alacritty" TTY="/dev/pts/1" COLUMNS="148" LINES="36"]
[;f7:29PMa]ch[siago@arch-sentinL1:~/Documents/school/ufmg/3_Semestre/ED/codes/TP/c19 ]
 $ gcc -g c19correto.gd			b a.out
GNU gdb (GDB) 13.2
Copyright (C) 2023 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-pc-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...
(gdb) br 19
Breakpoint 1 at 0x11dd: file c19correto.c, line 19.
(gdb) run
Starting program: /home/iago/Documents/school/ufmg/3_Semestre/ED/codes/TP/c19/a.out
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/usr/lib/libthread_db.so.1".
enter a number:

Breakpoint 1, printSum () at c19correto.c:19
19	    fgets(line, 10, stdin);
(gdb) next
5
21		strtok(line, "\n");
(gdb) next
22	    sprintf(buf,"sum=%d",sum_to_n(atoi(line)));
(gdb) p buf
$1 = "\000\000\000\000\000\000\000\000\000"
(gdb) next
23	    printf("%s\n",buf);
(gdb) c
Continuing.
sum=15
[Inferior 1 (process 137186) exited normally]
(gdb) exit
[;f7:29PMa]ch[siago@arch-sentinL1:~/Documents/school/ufmg/3_Semestre/ED/codes/TP/c19 ]
 $ valgrind --leak-check=full ./a.ouvalgrind --leak-check=full ./a.out
==137238== Memcheck, a memory error detector
==137238== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==137238== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==137238== Command: ./a.out
==137238==
enter a number:
5
sum=15
==137238==
==137238== HEAP SUMMARY:
==137238==     in use at exit: 0 bytes in 0 blocks
==137238==   total heap usage: 2 allocs, 2 frees, 2,048 bytes allocated
==137238==
==137238== All heap blocks were freed -- no leaks are possible
==137238==
==137238== For lists of detected and suppressed errors, rerun with: -s
==137238== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[;f7:29PMa]ch[siago@arch-sentinL1:~/Documents/school/ufmg/3_Semestre/ED/codes/TP/c19 ]
 $ exit

Script done on 2023-09-08 19:29:48-03:00 [COMMAND_EXIT_CODE="0"]

